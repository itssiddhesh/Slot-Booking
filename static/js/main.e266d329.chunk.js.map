{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","DISCOVERY_DOCS","useState","value","onchange","select","setSelect","name","setName","des","setDes","selectTime","setSelectTime","dateTime","setdateTime","handleSelectTime","e","target","textContent","useEffect","toISOString","className","console","log","style","margin","onChange","required","type","placeholder","marginTop","toDateString","time","map","i","id","onClick","gapi","load","client","init","apiKey","clientId","discoveryDocs","scope","auth2","getAuthInstance","signIn","then","event","calendar","events","insert","execute","window","open","htmlLink","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e266d329.chunk.js","sourcesContent":["import \"./App.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport { useEffect, useState } from \"react\";\nimport { CalendarComponent} from '@syncfusion/ej2-react-calendars';\nimport { gapi } from 'gapi-script';\n\nfunction App() {\n  var CLIENT_ID =\"217599394783-d73mdf1ttibaqcpbc9dvkkh0d7if68cr.apps.googleusercontent.com\";\n  var API_KEY = \"AIzaSyBI0lXwGMxTBk0-bHRvqHFao3oOxLOgLkQ\";\n  var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n  var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\n  const [value, onchange] = useState('');\n  const [select, setSelect] = useState(\"Training Room\");\n  const [name, setName] = useState(\"\");\n  const [des, setDes] = useState(\"\");\n  const [selectTime, setSelectTime] = useState('');\n  const [dateTime, setdateTime] = useState('');\n\n  const times = [\n    { time: \"10:00 AM\" },\n    { time: \"10:30 AM\" },\n    { time: \"11:00 AM\" },\n    { time: \"11:30 AM\" },\n    { time: \"12:00 PM\" },\n    { time: \"12:30 PM\" },\n    { time: \"1:00 PM\" },\n    { time: \"1:30 PM\" },\n    { time: \"2:00 PM\" },\n    { time: \"2:30 PM\" },\n    { time: \"3:00 PM\" },\n    { time: \"3:30 PM\" },\n    { time: \"4:00 PM\" },\n    { time: \"4:30 PM\" },\n    { time: \"5:00 PM\" },\n    { time: \"5:30 PM\" },\n    { time: \"6:00 PM\" },\n    { time: \"6:30 PM\" },\n  ];\n\n  const handleSelect = (e) => {\n    setSelect(e.target.value);\n  };\n\n\n  const handleClick = () => {\n    if(!dateTime || !value.value || des==='' || name===''|| selectTime==='' || !value){\n      alert('Give all the credentials!!');\n    }else{\n      gapi.load('client:auth2',()=>{\n        console.log('loaded client');\n\n        gapi.client.init({\n          apiKey: API_KEY,\n          clientId: CLIENT_ID,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPES,\n        })\n\n        gapi.client.load('calendar','v3',()=>console.log('cool'))\n\n        gapi.auth2.getAuthInstance().signIn().then(()=>{\n          var event = {\n            'summary': `Training Room Affle(${name})`,\n            'location': 'Affle (India) Limited,Gurgaon,Delhi',\n            'description': `${des}`,\n            'start': {\n              'dateTime': `${dateTime}`,\n              'timeZone': 'Asia/Kolkata'\n            },\n            'end': {\n              'dateTime': `${dateTime}`,\n              'timeZone': 'Asia/Kolkata'\n            },\n            'recurrence': [\n              'RRULE:FREQ=DAILY;COUNT=2'\n            ],\n            'attendees': [\n              {'email': 'lpage@example.com'},\n              {'email': 'sbrin@example.com'}\n            ],\n            'reminders': {\n              'useDefault': false,\n              'overrides': [\n                {'method': 'email', 'minutes': 24 * 60},\n                {'method': 'popup', 'minutes': 10}\n              ]\n            }\n          }\n\n          var request = gapi.client.calendar.events.insert({\n            'calendarId': 'primary',\n            'resource': event,\n          })\n\n          request.execute(event=>{\n            window.open(event.htmlLink)\n            \n          })\n          alert(`Appointment Booked on ${value.value.toDateString()} at ${selectTime}`)\n        })\n\n      })\n    }\n  }\n\n  const handleSelectTime = (e) => {\n    setSelectTime(e.target.textContent);\n  };\n\n  useEffect(()=>{\n    if(value.value){\n      setdateTime(value.value.toISOString());\n    }\n  },[value])\n\n  return (\n    <div className=\"App\">\n      {console.log(dateTime)}\n      <nav className=\"navbar\">\n        <button>Logout</button>\n      </nav>\n      <div className=\"main\">\n        <h2>Meeting Room Booking</h2>\n        <fieldset style={{margin: '4px'}}>\n          <legend>Meeting Room</legend>\n          <select value={select} onChange={handleSelect} required>\n            <option>Training Room</option>\n          </select>\n        </fieldset>\n        <fieldset style={{margin: '4px'}}>\n          <legend>Name</legend>\n          <input\n            type=\"text\"\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            placeholder=\"Enter Your Name\"\n            required\n          />\n        </fieldset>\n        <fieldset style={{margin: '4px'}}>\n          <legend>Meeting Description</legend>\n          <input\n            type=\"text\"\n            value={des}\n            onChange={(e) => {\n              setDes(e.target.value);\n            }}\n            placeholder=\"Enter meeting description\"\n            required\n          />\n        </fieldset>\n        <div style={{marginTop: '10px'}}>\n        <CalendarComponent value={value} onChange={onchange} />\n        </div>\n        <h5>{value.value && value.value.toDateString()}</h5>\n        <h3>Please select your preferred slot</h3>\n        <div className='booking-time'>\n          {times.map((time, i) => (\n            <button\n              key={i}\n              id={`time${i}`}\n              className='timeslot'\n              onClick={handleSelectTime}\n            >\n              {time.time}\n            </button>\n          ))}\n        </div>\n        <div>\n        <button\n              id='time18'\n              className='timeslot'\n              onClick={handleSelectTime}\n            >\n              7:00 PM\n            </button>\n        </div>\n        <button className='book-btn' onClick={handleClick}>BOOK APPOINTMENT</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}